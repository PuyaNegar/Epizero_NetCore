// <auto-generated />
using System;
using DataAccessLayer.ApplicationDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MainDBContext))]
    [Migration("20210422060006_14000202-1029")]
    partial class _140002021029
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataModels.ContentsModels.SlidersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("PicPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("DataModels.ContentsModels.SuggestionCoursesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.ToTable("SuggestionCourses");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserGroupsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserProfilesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HighSchoolGraduationDate")
                        .HasColumnType("date");

                    b.Property<string>("HighSchoolName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HighSchoolStartDate")
                        .HasColumnType("date");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("NewSystemAverage")
                        .HasColumnType("float");

                    b.Property<double?>("OldSystemAverage")
                        .HasColumnType("float");

                    b.Property<string>("PassPortNo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegisterFormPath")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("RegisterFormUploadDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TurkeyAddress")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UsersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PasswoerdHash")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PersonalPicPath")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserName", "UserGroupId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescriptiveQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAnswerContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionAnswerContext_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("DescriptiveQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescrptiveQuestionAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentAnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentAnswerId")
                        .IsUnique();

                    b.ToTable("DescrptiveQuestionAnswers");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DifficultyLevelTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevelTypes");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.LessonTopicsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModUserId");

                    b.ToTable("LessonTopics");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentAnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SelectedOption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentAnswerId")
                        .IsUnique();

                    b.ToTable("MultipleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option5_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("MultipleChoiceQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamDescriptiveQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAnswerContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamQuestionsId")
                        .IsUnique();

                    b.ToTable("OnlineExamDescriptiveQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamMultipleChoiceQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamQuestionsId")
                        .IsUnique();

                    b.ToTable("OnlineExamMultipleChoiceQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DifficultyLevelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionMakerUserId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelTypeId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamId");

                    b.HasIndex("QuestionMakerUserId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("OnlineExamQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswerFilesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentId");

                    b.ToTable("OnlineExamStudentAnswerFiles");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentId");

                    b.HasIndex("OnlineExamQuestionId", "OnlineExamStudentId")
                        .IsUnique();

                    b.ToTable("OnlineExamStudentAnswers");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EnterDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinalizedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("OnlineExamId", "StudentUserId")
                        .IsUnique();

                    b.ToTable("OnlineExamStudents");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllowedTimeToEnter")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasNegativePoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRandomOption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRandomQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("OnlineExams");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DifficultyLevelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonTopicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionContext_Html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionMakerUserId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelTypeId");

                    b.HasIndex("LessonId");

                    b.HasIndex("LessonTopicId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionMakerUserId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.StudentOnlineExamResultsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AvrageScore")
                        .HasColumnType("float");

                    b.Property<int>("CorrectAnswered")
                        .HasColumnType("int");

                    b.Property<int>("IncorrectAnswered")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("LessonRank")
                        .HasColumnType("int");

                    b.Property<double>("MaxScore")
                        .HasColumnType("float");

                    b.Property<double>("MinScore")
                        .HasColumnType("float");

                    b.Property<int>("OnlineExamStudentId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.Property<double>("RawScore")
                        .HasColumnType("float");

                    b.Property<int>("TotalRank")
                        .HasColumnType("int");

                    b.Property<int>("Unanswered")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnlineExamStudentId");

                    b.HasIndex("LessonId", "OnlineExamStudentId")
                        .IsUnique();

                    b.ToTable("StudentOnlineExamResults");
                });

            modelBuilder.Entity("DataModels.SystemsModels.ErrorLogsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccureDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CouponsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForFirstOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDiscount")
                        .HasColumnType("int");

                    b.Property<int>("MinSubTotal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ToDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CoursesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerPicPath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("CourseDuration")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPrecent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.FieldsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LanguagesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LessonsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ModUserId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LevelGroupsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LevelGroups");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LevelsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LevelGroupId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.WeekDaysModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WeekDays");
                });

            modelBuilder.Entity("DataModels.ContentsModels.SlidersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.SuggestionCoursesModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Courses")
                        .WithMany("SuggestionCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserProfilesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("DataModels.IdentitiesModels.UserProfilesModel", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UsersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UserGroupsModel", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescriptiveQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionsModel", "Question")
                        .WithOne("DescriptiveQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.DescriptiveQuestionsModel", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescrptiveQuestionAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", "OnlineExamStudentAnswer")
                        .WithOne("DescrptiveQuestionAnswer")
                        .HasForeignKey("DataModels.OnlineExamModels.DescrptiveQuestionAnswersModel", "OnlineExamStudentAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.LessonTopicsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("LessonTopics")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", "OnlineExamStudentAnswer")
                        .WithOne("MultipleChoiceQuestionAnswer")
                        .HasForeignKey("DataModels.OnlineExamModels.MultipleChoiceQuestionAnswersModel", "OnlineExamStudentAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionsModel", "Question")
                        .WithOne("MultipleChoiceQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.MultipleChoiceQuestionsModel", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamDescriptiveQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamQuestionsModel", "OnlineExamQuestion")
                        .WithOne("OnlineExamDescriptiveQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.OnlineExamDescriptiveQuestionsModel", "OnlineExamQuestionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamMultipleChoiceQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamQuestionsModel", "OnlineExamQuestion")
                        .WithOne("OnlineExamMultipleChoiceQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.OnlineExamMultipleChoiceQuestionsModel", "OnlineExamQuestionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamQuestionsModel", b =>
                {
                    b.HasOne("DataModels.OnlineExamModels.DifficultyLevelTypesModel", "DifficultyLevelType")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("DifficultyLevelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExam")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("QuestionMakerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionTypesModel", "QuestionType")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswerFilesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentsModel", "OnlineExamStudent")
                        .WithMany("OnlineExamStudentAnswerFiles")
                        .HasForeignKey("OnlineExamStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamQuestionsModel", "OnlineExamQuestion")
                        .WithMany("OnlineExamStudentAnswers")
                        .HasForeignKey("OnlineExamQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentsModel", "OnlineExamStudent")
                        .WithMany("OnlineExamStudentAnswers")
                        .HasForeignKey("OnlineExamStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExam")
                        .WithMany()
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionTypesModel", "QuestionType")
                        .WithMany("OnlineExams")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany("OnlineExams")
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionsModel", b =>
                {
                    b.HasOne("DataModels.OnlineExamModels.DifficultyLevelTypesModel", "DifficultyLevelType")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.LessonTopicsModel", "LessonTopic")
                        .WithMany("Questions")
                        .HasForeignKey("LessonTopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionMakerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionTypesModel", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.StudentOnlineExamResultsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("StudentOnlineExamResults")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentsModel", "OnlineExamStudent")
                        .WithMany("StudentOnlineExamResults")
                        .HasForeignKey("OnlineExamStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CouponsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CoursesModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseTypesModel", "CourseTypes")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LanguagesModel", "Languages")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lessons")
                        .WithMany("Courses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUsers")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LessonsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.FieldsModel", "Field")
                        .WithMany("Lessons")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.LevelsModel", "Level")
                        .WithMany("Lessons")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LevelsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.LevelGroupsModel", "LevelGroups")
                        .WithMany("Levels")
                        .HasForeignKey("LevelGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
