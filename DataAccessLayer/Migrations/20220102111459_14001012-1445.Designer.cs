// <auto-generated />
using System;
using DataAccessLayer.ApplicationDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MainDBContext))]
    [Migration("20220102111459_14001012-1445")]
    partial class _140010121445
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.AcademyProductTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AcademyProductTypes");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.CitiesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.CountriesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.CourseMultiTeacherShareTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CourseMultiTeacherShareTypes");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.IntroductionWithAcademyTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IntroductionWithAcademyType");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.InvoiceStatusTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatusTypes");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.InvoiceTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTypes");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.LanguagesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.OrderStatusTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatusTypes");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.PaymentGatewaysModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentGateways");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.ProvincesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ModUserId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.SchoolTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SchoolTypes");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.SmsOptionsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SmsOptions");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.TagsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.WeekDaysModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WeekDays");
                });

            modelBuilder.Entity("DataModels.ContentsModels.AcceptedStudentInEntranceExamsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("EntranceExamTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int?>("OlympiadMedalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PicPath")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("StudentFullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntranceExamTypeId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OlympiadMedalTypeId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("AcceptedStudentInEntranceExams");
                });

            modelBuilder.Entity("DataModels.ContentsModels.BlogGroupsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("BlogGroups");
                });

            modelBuilder.Entity("DataModels.ContentsModels.BlogsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("PicPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BlogGroupId");

                    b.HasIndex("ModUserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DataModels.ContentsModels.ContactUsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MobNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("DataModels.ContentsModels.CoursePromoSectionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("CoursePromoSections");
                });

            modelBuilder.Entity("DataModels.ContentsModels.CoursePromosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CoursePromoSectionId")
                        .HasColumnType("int");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CoursePromoSectionId");

                    b.HasIndex("ModUserId");

                    b.ToTable("CoursePromos");
                });

            modelBuilder.Entity("DataModels.ContentsModels.CourseSampleVideosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.ToTable("CourseSampleVideos");
                });

            modelBuilder.Entity("DataModels.ContentsModels.EntranceExamTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EntranceExamTypes");
                });

            modelBuilder.Entity("DataModels.ContentsModels.OlympiadMedalTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OlympiadMedalTypes");
                });

            modelBuilder.Entity("DataModels.ContentsModels.OnlineExamPromoSectionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("OnlineExamPromoSections");
                });

            modelBuilder.Entity("DataModels.ContentsModels.OnlineExamPromosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamPromoSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamPromoSectionId");

                    b.ToTable("OnlineExamPromos");
                });

            modelBuilder.Entity("DataModels.ContentsModels.ProductPromoSectionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("ProductPromoSections");
                });

            modelBuilder.Entity("DataModels.ContentsModels.ProductPromosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPromoSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPromoSectionId");

                    b.ToTable("ProductPromos");
                });

            modelBuilder.Entity("DataModels.ContentsModels.SlidersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("PicPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("DataModels.ContentsModels.SuggestionTeachersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("SuggestionTeachers");
                });

            modelBuilder.Entity("DataModels.ContentsModels.TeacherCommentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ConfirmedDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("TeacherComments");
                });

            modelBuilder.Entity("DataModels.ContentsModels.TeacherResumesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("TeacherResumes");
                });

            modelBuilder.Entity("DataModels.ContentsModels.TeacherSampleVideosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSampleVideos");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.BankPosDevicesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ModUserId");

                    b.ToTable("BankPosDevices");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.BanksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.ChequesStatusTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChequesStatusTypes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.CourseMultiTeacherSharesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOrPercent")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseMultiTeacherShareTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsIndexTeacher")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseMultiTeacherShareTypeId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId", "CourseId")
                        .IsUnique();

                    b.ToTable("CourseMultiTeacherShares");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.DiscountCodeAcademyProductsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademyProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int?>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademyProductTypeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountCodeAcademyProducts");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.DiscountCodeTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DiscountCodeTypes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.DiscountCodesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOrPercent")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DiscountCodeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUseableForDiscountAcademyProduct")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDiscountAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfStudentCanBeUse")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTotalUse")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SalePartnerAmountOrPercent")
                        .HasColumnType("int");

                    b.Property<bool?>("SalePartnerIsPrePayment")
                        .HasColumnType("bit");

                    b.Property<int?>("SalePartnerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPartnerShareTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UniqueGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DiscountCodeTypeId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("SalePartnerUserId");

                    b.HasIndex("SalesPartnerShareTypeId");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.FinancialTransactionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("DepositAmount")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PreviousBalance")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("WithdrawalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.InvoicesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("InvoiceStatusDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("RefInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNo")
                        .IsUnique();

                    b.HasIndex("InvoiceStatusTypeId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RefInvoiceId")
                        .IsUnique()
                        .HasFilter("[RefInvoiceId] IS NOT NULL");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.PaidChequesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountPaid")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("ChequesNo")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ChequesStatusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("RemainingAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("StudentFinancialPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ChequesStatusTypeId");

                    b.HasIndex("ModUserId");

                    b.ToTable("PaidCheques");

                    b.HasCheckConstraint("CK_PaidCheques_RemainingAmount", "[RemainingAmount] >= 0");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.ReturnPaymentTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ReturnPaymentTypes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.SalesPartnerShareTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SalesPartnerShareTypes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.SalesPartnerUserOptionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("SalePartnerIsPrepayment")
                        .HasColumnType("bit");

                    b.Property<int>("SalesPartnerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("SalesPartnerUserId")
                        .IsUnique();

                    b.HasIndex("CourseId", "SalesPartnerUserId")
                        .IsUnique();

                    b.ToTable("SalesPartnerUserOptions");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.SalesPartnerUserSharesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SalePartnerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OrderDetailId")
                        .IsUnique();

                    b.HasIndex("SalePartnerUserId");

                    b.ToTable("SalesPartnerUserShares");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentChequesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("PaidChequeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentFinancialPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("PaidChequeId");

                    b.HasIndex("StudentFinancialPaymentId")
                        .IsUnique();

                    b.ToTable("StudentCheques");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialDebtsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingStudentId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountDiscription")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingStudentId")
                        .IsUnique();

                    b.HasIndex("ModUserId");

                    b.ToTable("StudentFinancialDebts");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialManualDebtsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingStudentId")
                        .HasColumnType("int");

                    b.Property<long>("DebtAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingStudentId");

                    b.HasIndex("ModUserId");

                    b.ToTable("StudentFinancialManualDebts");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialPaymentTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StudentFinancialPaymentTypes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialPaymentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountPaid")
                        .HasColumnType("int");

                    b.Property<int?>("CourseMeetingStudentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentFinancialPaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingStudentId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentFinancialPaymentTypeId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentFinancialPayments");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialReturnPaymentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseMeetingStudentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ReturnAmount")
                        .HasColumnType("int");

                    b.Property<int>("ReturnPaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingStudentId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("ReturnPaymentTypeId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentFinancialReturnPayments");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CourseMeetingStudentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingStudentId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentFines");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentPaymentLinksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountPayable")
                        .HasColumnType("int");

                    b.Property<int>("CourseMeetingStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingStudentId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModUserId");

                    b.ToTable("StudentPaymentLinks");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentPosPaymentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankPosDeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentFinancialPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BankPosDeviceId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentFinancialPaymentId")
                        .IsUnique();

                    b.ToTable("StudentPosPayments");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherMeetingFeesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<int>("TeacherPaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherPaymentMethodId")
                        .IsUnique();

                    b.ToTable("TeacherMeetingFees");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherPaymentMethodTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TeacherPaymentMethodTypes");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherPaymentMethodsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherPaymentMethodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDebtAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalSattledAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherPaymentMethodTypeId");

                    b.HasIndex("TeacherUserId", "CourseId")
                        .IsUnique();

                    b.ToTable("TeacherPaymentMethods");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherPercentagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<double>("Number1")
                        .HasColumnType("float");

                    b.Property<double>("Number2")
                        .HasColumnType("float");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherPaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherPaymentMethodId")
                        .IsUnique();

                    b.ToTable("TeacherPercentages");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherSattlementSchedulesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherPaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherPaymentMethodId");

                    b.ToTable("TeacherSattlementSchedules");
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherSattlementsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("SettledAmount")
                        .HasColumnType("int");

                    b.Property<int>("TeacherSattlementScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherSattlementScheduleId")
                        .IsUnique();

                    b.ToTable("TeacherSattlements");
                });

            modelBuilder.Entity("DataModels.HomeworksModels.HomeworkAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<int>("HomeWorkId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("HomeWorkId", "StudentUserId")
                        .IsUnique();

                    b.ToTable("HomeworkAnswers");
                });

            modelBuilder.Entity("DataModels.HomeworksModels.HomeworksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("ModUserId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.ConfirmationCodesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpireDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("SendCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("SentDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ConfirmationCodes");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.IdentifierChargeSettingsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdentifierChargeAmount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RegisteredUserChargeAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("IdentifierChargeSettings");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessageReceiverUsersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReceiverUsers");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessageTagsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TagId");

                    b.ToTable("MessageTags");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessageTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("TagsExpression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MessageTypeId");

                    b.HasIndex("ModUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.SendSMSTargetsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobNo")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("SendSMSTargets");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.StudentUserProfilesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherMobNo")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FavoriteJob")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("IntroductionWithAcademyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("MotherMobNo")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationalCardPicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SMSCredit")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SchoolTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("FieldId");

                    b.HasIndex("IdentifierUserId");

                    b.HasIndex("IntroductionWithAcademyTypeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StudentUserProfiles");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.StudentUserSmsOptionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SmsOptionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("SmsOptionId", "StudentUserId")
                        .IsUnique();

                    b.ToTable("StudentUserSmsOptions");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.TeacherPrefixesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TeacherUserPrefixes");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.TeacherUserProfilesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerPicPath")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEnabledSms")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowFinancial")
                        .HasColumnType("bit");

                    b.Property<string>("LessonTeacher")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TeacherPrefixId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherUserTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TeacherPrefixId");

                    b.HasIndex("TeacherUserTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TeacherUserProfiles");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.TeacherUserTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TeacherUserTypes");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserGroupsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserLoginHistoriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountLogin")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("UserLoginHistories");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserLoginLogsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastIp")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastLoginDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUserAgent")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentUserId", "Guid")
                        .IsUnique();

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UsersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PasswoerdHash")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PersonalPicPath")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("NationalCode", "UserGroupId")
                        .IsUnique()
                        .HasFilter("[NationalCode] IS NOT NULL");

                    b.HasIndex("UserName", "UserGroupId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.CourseMeetingOnlineExamsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamId");

                    b.HasIndex("CourseMeetingId", "OnlineExamId")
                        .IsUnique();

                    b.ToTable("CourseMeetingOnlineExams");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescriptiveQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAnswerContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionAnswerContext_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("DescriptiveQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescrptiveQuestionAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentAnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentAnswerId")
                        .IsUnique();

                    b.ToTable("DescrptiveQuestionAnswers");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DifficultyLevelTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevelTypes");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.LessonTopicsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentRoute")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModUserId");

                    b.ToTable("LessonTopics");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentAnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SelectedOption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentAnswerId")
                        .IsUnique();

                    b.ToTable("MultipleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int");

                    b.Property<string>("DescriptiveAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptiveAnswer_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4_Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("MultipleChoiceQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamAnalysisModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamsId");

                    b.ToTable("OnlineExamAnalysis");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamDescriptiveQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAnswerContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamQuestionsId")
                        .IsUnique();

                    b.ToTable("OnlineExamDescriptiveQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamFieldsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamId");

                    b.HasIndex("FieldId", "OnlineExamId")
                        .IsUnique();

                    b.ToTable("OnlineExamFields");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamMultipleChoiceQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int");

                    b.Property<string>("DescriptiveAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamQuestionsId")
                        .IsUnique();

                    b.ToTable("OnlineExamMultipleChoiceQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DifficultyLevelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionMakerUserId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelTypeId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamId");

                    b.HasIndex("QuestionMakerUserId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("OnlineExamQuestions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswerFilesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentId");

                    b.ToTable("OnlineExamStudentAnswerFiles");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamStudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamStudentId");

                    b.HasIndex("OnlineExamQuestionId", "OnlineExamStudentId")
                        .IsUnique();

                    b.ToTable("OnlineExamStudentAnswers");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EnterDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinalizedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAbsentOnMainTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("OnlineExamId", "StudentUserId")
                        .IsUnique();

                    b.ToTable("OnlineExamStudents");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OnlineExamTypes");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllowedTimeToEnter")
                        .HasColumnType("int");

                    b.Property<string>("AnalysisVideoLink")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasNegativePoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbleToEnterExpiredExam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableForSpecificFields")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRandomOption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRandomQuestions")
                        .HasColumnType("bit");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OnlineExamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId")
                        .IsUnique()
                        .HasFilter("[CourseMeetingId] IS NOT NULL");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OnlineExamTypeId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("OnlineExams");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionReferencesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("QuestionReferences");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DifficultyLevelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonTopicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionContext_Html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionMakerUserId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelTypeId");

                    b.HasIndex("LessonId");

                    b.HasIndex("LessonTopicId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("QuestionMakerUserId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.StudentOnlineExamResultsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AvrageScore")
                        .HasColumnType("float");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CorrectAnswered")
                        .HasColumnType("int");

                    b.Property<int>("IncorrectAnswered")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("LessonRank")
                        .HasColumnType("int");

                    b.Property<double>("MaxScore")
                        .HasColumnType("float");

                    b.Property<double>("MinScore")
                        .HasColumnType("float");

                    b.Property<int>("OnlineExamStudentId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.Property<double>("RawScore")
                        .HasColumnType("float");

                    b.Property<int>("TotalRank")
                        .HasColumnType("int");

                    b.Property<int>("Unanswered")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnlineExamStudentId");

                    b.HasIndex("LessonId", "OnlineExamStudentId")
                        .IsUnique();

                    b.ToTable("StudentOnlineExamResults");
                });

            modelBuilder.Entity("DataModels.OrdersModels.OrderDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademyProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AcademyProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountCodeAmount")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<int?>("OnlineExamId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyProductTypeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("OnlineExamId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DataModels.OrdersModels.OrdersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("FinalInvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderStatueDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderStatusTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("FinalInvoiceId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OrderStatusTypeId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataModels.OrdersModels.PaymentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNo")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentGatewayId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataModels.SystemsModels.CourseCategoryTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseCategoryTypes");
                });

            modelBuilder.Entity("DataModels.SystemsModels.ErrorLogsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccureDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.AbsentationsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.HasIndex("Date", "StudentUserId")
                        .IsUnique();

                    b.ToTable("Absentations");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseBookletsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(Max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.ToTable("CourseBooklets");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseDescriptionVideosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Inx")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.ToTable("CourseDescriptionVideos");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingBookletsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(Max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("ModUserId");

                    b.ToTable("CourseMeetingBooklets");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingDedicatedTeachersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId")
                        .IsUnique();

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("CourseMeetingDedicatedTeachers");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingStudentTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseMeetingStudentTypes");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("CourseMeetingStudentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnlineRegistrated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemporaryRegistration")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RawPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SalePartnerPrice")
                        .HasColumnType("int");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("CourseMeetingStudentTypeId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("CourseMeetingStudents");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingVideosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerPicPath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("ModUserId");

                    b.ToTable("CourseMeetingVideos");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(Max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<bool>("HasBooklet")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExam")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHomework")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchasable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("CourseMeetings");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseStudentQuestionAnswersModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnsweredUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBestAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AnsweredUserId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentQuestionId");

                    b.ToTable("CourseStudentQuestionAnswers");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseStudentQuestionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.Property<int>("UnVerifyAnswerCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("CourseStudentQuestions");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CoursesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerPicPath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("CourseCategoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CourseDuration")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Inx")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiTeacher")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowDetailsInWeb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("LogoPicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseCategoryTypeId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("TeacherUserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.FieldsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LessonsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UnitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ModUserId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LevelGroupsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LevelGroups");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LevelsModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LevelGroupId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.MeetingAbsentationsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("ModUserId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("MeetingAbsentations");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.OnlineClassesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseMeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAbleToAccessRecordUrl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIgnoreClass")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecordUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseMeetingId");

                    b.HasIndex("MeetingId")
                        .IsUnique();

                    b.ToTable("OnlineClasses");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.ProductTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.ProductsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ModUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PicPath")
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ModUserId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.CitiesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.ProvincesModel", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.ProvincesModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.CountriesModel", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.BasicDefinitionsModels.TagsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.AcceptedStudentInEntranceExamsModel", b =>
                {
                    b.HasOne("DataModels.ContentsModels.EntranceExamTypesModel", "EntranceExamType")
                        .WithMany("AcceptedStudentInEntranceExams")
                        .HasForeignKey("EntranceExamTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.ContentsModels.OlympiadMedalTypesModel", "OlympiadMedalType")
                        .WithMany("AcceptedStudentInEntranceExams")
                        .HasForeignKey("OlympiadMedalTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.BlogGroupsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.BlogsModel", b =>
                {
                    b.HasOne("DataModels.ContentsModels.BlogGroupsModel", "BlogGroups")
                        .WithMany("blogs")
                        .HasForeignKey("BlogGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.CoursePromoSectionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.CoursePromosModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CoursePromoSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.ContentsModels.CoursePromoSectionsModel", "CoursePromoSection")
                        .WithMany("CoursePromos")
                        .HasForeignKey("CoursePromoSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.CourseSampleVideosModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CourseSampleVideos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.OnlineExamPromoSectionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.OnlineExamPromosModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("OnlineExamPromos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.ContentsModels.OnlineExamPromoSectionsModel", "OnlineExamPromoSection")
                        .WithMany("OnlineExamPromos")
                        .HasForeignKey("OnlineExamPromoSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.ProductPromoSectionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.ProductPromosModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.ProductsModel", "Product")
                        .WithMany("ProductPromoSections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.ContentsModels.ProductPromoSectionsModel", "ProductPromoSection")
                        .WithMany("ProductPromos")
                        .HasForeignKey("ProductPromoSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.SlidersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.SuggestionTeachersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.TeacherCommentsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.TeacherResumesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.ContentsModels.TeacherSampleVideosModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.BankPosDevicesModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.BanksModel", "Bank")
                        .WithMany("BankPosDevices")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.BanksModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.CourseMultiTeacherSharesModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CourseMultiTeacherShares")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.CourseMultiTeacherShareTypesModel", "CourseMultiTeacherShareType")
                        .WithMany("CourseMultiTeacherShares")
                        .HasForeignKey("CourseMultiTeacherShareTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany("CourseMultiTeacherShares")
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.DiscountCodeAcademyProductsModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.AcademyProductTypesModel", "AcademyProductType")
                        .WithMany("DiscountCodeAcademyProducts")
                        .HasForeignKey("AcademyProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("DiscountCodeAcademyProducts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("DiscountCodeAcademyProducts")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.FinancialsModels.DiscountCodesModel", "DiscountCode")
                        .WithMany("DiscountCodeAcademyProducts")
                        .HasForeignKey("DiscountCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExams")
                        .WithMany("DiscountCodeAcademyProducts")
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.ProductsModel", "Product")
                        .WithMany("DiscountCodeAcademyProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModels.FinancialsModels.DiscountCodesModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.DiscountCodeTypesModel", "DiscountCodeType")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("DiscountCodeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "SalePartnerUser")
                        .WithMany()
                        .HasForeignKey("SalePartnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.FinancialsModels.SalesPartnerShareTypesModel", "SalesPartnerShareType")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("SalesPartnerShareTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModels.FinancialsModels.FinancialTransactionsModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.InvoicesModel", "Invoice")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OrdersModels.OrdersModel", "Order")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModels.FinancialsModels.InvoicesModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.InvoiceStatusTypesModel", "InvoiceStatusType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.InvoiceTypesModel", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OrdersModels.OrdersModel", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.FinancialsModels.InvoicesModel", "RefInvoice")
                        .WithOne()
                        .HasForeignKey("DataModels.FinancialsModels.InvoicesModel", "RefInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.PaidChequesModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.BanksModel", "Bank")
                        .WithMany("PaidCheques")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.ChequesStatusTypesModel", "ChequesStatusType")
                        .WithMany("PaidCheques")
                        .HasForeignKey("ChequesStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.SalesPartnerUserOptionsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("SalesPartnerUserOptions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "SalesPartnerUser")
                        .WithOne()
                        .HasForeignKey("DataModels.FinancialsModels.SalesPartnerUserOptionsModel", "SalesPartnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.SalesPartnerUserSharesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OrdersModels.OrderDetailsModel", "OrderDetail")
                        .WithOne("SalesPartnerShare")
                        .HasForeignKey("DataModels.FinancialsModels.SalesPartnerUserSharesModel", "OrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "SalePartnerUser")
                        .WithMany()
                        .HasForeignKey("SalePartnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentChequesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.PaidChequesModel", "PaidCheque")
                        .WithMany("StudentCheques")
                        .HasForeignKey("PaidChequeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.StudentFinancialPaymentsModel", "StudentFinancialPayment")
                        .WithMany()
                        .HasForeignKey("StudentFinancialPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialDebtsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", "CourseMeetingStudent")
                        .WithOne("StudentFinancialDebts")
                        .HasForeignKey("DataModels.FinancialsModels.StudentFinancialDebtsModel", "CourseMeetingStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialManualDebtsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", "CourseMeetingStudent")
                        .WithMany("StudentFinancialManualDebts")
                        .HasForeignKey("CourseMeetingStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialPaymentsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", "CourseMeetingStudent")
                        .WithMany("StudentFinancialPayments")
                        .HasForeignKey("CourseMeetingStudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.StudentFinancialPaymentTypesModel", "StudentFinancialPaymentType")
                        .WithMany("StudentFinancialPayments")
                        .HasForeignKey("StudentFinancialPaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinancialReturnPaymentsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", "CourseMeetingStudent")
                        .WithMany("StudentFinancialReturnPayments")
                        .HasForeignKey("CourseMeetingStudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.ReturnPaymentTypesModel", "ReturnPaymentType")
                        .WithMany("StudentReturnPayments")
                        .HasForeignKey("ReturnPaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentFinesModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", "CourseMeetingStudent")
                        .WithMany("StudentFines")
                        .HasForeignKey("CourseMeetingStudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentPaymentLinksModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", "CourseMeetingStudent")
                        .WithMany("StudentPaymentLinks")
                        .HasForeignKey("CourseMeetingStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.InvoicesModel", "Invoice")
                        .WithMany("StudentPaymentLinks")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.StudentPosPaymentsModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.BankPosDevicesModel", "BankPosDevices")
                        .WithMany("PosPayments")
                        .HasForeignKey("BankPosDeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.StudentFinancialPaymentsModel", "StudentFinancialPayment")
                        .WithMany("StudentPosPayments")
                        .HasForeignKey("StudentFinancialPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherMeetingFeesModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.TeacherPaymentMethodsModel", "TeacherPaymentMethod")
                        .WithOne("TeacherMeetingFee")
                        .HasForeignKey("DataModels.FinancialsModels.TeacherMeetingFeesModel", "TeacherPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherPaymentMethodsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("TeacherPaymentMethods")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.TeacherPaymentMethodTypesModel", "TeacherPaymentMethodType")
                        .WithMany("TeacherPaymentMethods")
                        .HasForeignKey("TeacherPaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherPercentagesModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.CitiesModel", "City")
                        .WithMany("TeacherPercentages")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.TeacherPaymentMethodsModel", "TeacherPaymentMethod")
                        .WithOne("TeacherPercentage")
                        .HasForeignKey("DataModels.FinancialsModels.TeacherPercentagesModel", "TeacherPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherSattlementSchedulesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.FinancialsModels.TeacherPaymentMethodsModel", "TeacherPaymentMethod")
                        .WithMany("TeacherSattlementSchedules")
                        .HasForeignKey("TeacherPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.FinancialsModels.TeacherSattlementsModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.TeacherSattlementSchedulesModel", "TeacherSattlementSchedules")
                        .WithOne("TeacherSattlement")
                        .HasForeignKey("DataModels.FinancialsModels.TeacherSattlementsModel", "TeacherSattlementScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.HomeworksModels.HomeworkAnswersModel", b =>
                {
                    b.HasOne("DataModels.HomeworksModels.HomeworksModel", "HomeWork")
                        .WithMany("HomeworkAnswers")
                        .HasForeignKey("HomeWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.HomeworksModels.HomeworksModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("Homeworks")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.IdentifierChargeSettingsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessageReceiverUsersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.MessagesModel", "Message")
                        .WithMany("MessageReceiverUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessageTagsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.MessagesModel", "Message")
                        .WithMany("MessageTags")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.TagsModel", "Tag")
                        .WithMany("MessageTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.MessagesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.MessageTypesModel", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.SendSMSTargetsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.StudentUserProfilesModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.CitiesModel", "City")
                        .WithMany("StudentUserProfiles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.FieldsModel", "Field")
                        .WithMany("StudentUserProfiles")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "IdentifierUser")
                        .WithMany()
                        .HasForeignKey("IdentifierUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.BasicDefinitionsModels.IntroductionWithAcademyTypesModel", "IntroductionWithAcademyType")
                        .WithMany("StudentUserProfiles")
                        .HasForeignKey("IntroductionWithAcademyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.LevelsModel", "Level")
                        .WithMany("StudentUserProfiles")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.BasicDefinitionsModels.SchoolTypesModel", "SchoolType")
                        .WithMany("StudentUserProfiles")
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithOne("StudentUserProfile")
                        .HasForeignKey("DataModels.IdentitiesModels.StudentUserProfilesModel", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.StudentUserSmsOptionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.SmsOptionsModel", "SmsOption")
                        .WithMany("StudentUserSmsOptions")
                        .HasForeignKey("SmsOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.TeacherUserProfilesModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.CitiesModel", "City")
                        .WithMany("TeacherUserProfiles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.TeacherPrefixesModel", "TeacherPrefix")
                        .WithMany("TeacherUserProfiles")
                        .HasForeignKey("TeacherPrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.TeacherUserTypesModel", "TeacherUserType")
                        .WithMany("TeacherUserProfiles")
                        .HasForeignKey("TeacherUserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithOne("TeacherUserProfile")
                        .HasForeignKey("DataModels.IdentitiesModels.TeacherUserProfilesModel", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserLoginHistoriesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "UserStudent")
                        .WithMany("UserLoginHistories")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UserLoginLogsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.IdentitiesModels.UsersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UserGroupsModel", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.CourseMeetingOnlineExamsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("CourseMeetingOnlineExams")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExam")
                        .WithMany("CourseMeetingOnlineExams")
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescriptiveQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionsModel", "Question")
                        .WithOne("DescriptiveQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.DescriptiveQuestionsModel", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.DescrptiveQuestionAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", "OnlineExamStudentAnswer")
                        .WithOne("DescrptiveQuestionAnswer")
                        .HasForeignKey("DataModels.OnlineExamModels.DescrptiveQuestionAnswersModel", "OnlineExamStudentAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.LessonTopicsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("LessonTopics")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", "OnlineExamStudentAnswer")
                        .WithOne("MultipleChoiceQuestionAnswer")
                        .HasForeignKey("DataModels.OnlineExamModels.MultipleChoiceQuestionAnswersModel", "OnlineExamStudentAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.MultipleChoiceQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionsModel", "Question")
                        .WithOne("MultipleChoiceQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.MultipleChoiceQuestionsModel", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamAnalysisModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExams")
                        .WithMany("OnlineExamAnalysises")
                        .HasForeignKey("OnlineExamsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamDescriptiveQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamQuestionsModel", "OnlineExamQuestion")
                        .WithOne("OnlineExamDescriptiveQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.OnlineExamDescriptiveQuestionsModel", "OnlineExamQuestionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamFieldsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.FieldsModel", "Field")
                        .WithMany("OnlineExamFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExam")
                        .WithMany("OnlineExamFields")
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamMultipleChoiceQuestionsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamQuestionsModel", "OnlineExamQuestion")
                        .WithOne("OnlineExamMultipleChoiceQuestion")
                        .HasForeignKey("DataModels.OnlineExamModels.OnlineExamMultipleChoiceQuestionsModel", "OnlineExamQuestionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamQuestionsModel", b =>
                {
                    b.HasOne("DataModels.OnlineExamModels.DifficultyLevelTypesModel", "DifficultyLevelType")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("DifficultyLevelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExam")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithMany()
                        .HasForeignKey("QuestionMakerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionTypesModel", "QuestionType")
                        .WithMany("OnlineExamQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswerFilesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentsModel", "OnlineExamStudent")
                        .WithMany("OnlineExamStudentAnswerFiles")
                        .HasForeignKey("OnlineExamStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamQuestionsModel", "OnlineExamQuestion")
                        .WithMany("OnlineExamStudentAnswers")
                        .HasForeignKey("OnlineExamQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentsModel", "OnlineExamStudent")
                        .WithMany("OnlineExamStudentAnswers")
                        .HasForeignKey("OnlineExamStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamStudentsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExam")
                        .WithMany()
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.OnlineExamsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithOne("OnlineExam")
                        .HasForeignKey("DataModels.OnlineExamModels.OnlineExamsModel", "CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamTypesModel", "OnlineExamType")
                        .WithMany("OnlineExams")
                        .HasForeignKey("OnlineExamTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionTypesModel", "QuestionType")
                        .WithMany("OnlineExams")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany("OnlineExams")
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionReferencesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.QuestionsModel", b =>
                {
                    b.HasOne("DataModels.OnlineExamModels.DifficultyLevelTypesModel", "DifficultyLevelType")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyLevelTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.LessonTopicsModel", "LessonTopic")
                        .WithMany("Questions")
                        .HasForeignKey("LessonTopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "User")
                        .WithMany()
                        .HasForeignKey("QuestionMakerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.QuestionTypesModel", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OnlineExamModels.StudentOnlineExamResultsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lesson")
                        .WithMany("StudentOnlineExamResults")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamStudentsModel", "OnlineExamStudent")
                        .WithMany("StudentOnlineExamResults")
                        .HasForeignKey("OnlineExamStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.OrdersModels.OrderDetailsModel", b =>
                {
                    b.HasOne("DataModels.BasicDefinitionsModels.AcademyProductTypesModel", "AcademyProductType")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AcademyProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.OnlineExamModels.OnlineExamsModel", "OnlineExams")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OnlineExamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.OrdersModels.OrdersModel", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.ProductsModel", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModels.OrdersModels.OrdersModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.DiscountCodesModel", "DiscountCode")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountCodeId");

                    b.HasOne("DataModels.FinancialsModels.InvoicesModel", "FinalInvoice")
                        .WithMany("Orders")
                        .HasForeignKey("FinalInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.BasicDefinitionsModels.OrderStatusTypesModel", "OrderStatusType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataModels.OrdersModels.PaymentsModel", b =>
                {
                    b.HasOne("DataModels.FinancialsModels.InvoicesModel", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.PaymentGatewaysModel", "PaymentGateway")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentGatewayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.AbsentationsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("Absentations")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseBookletsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Courses")
                        .WithMany("CourseBooklets")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseDescriptionVideosModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CourseDescriptionVideos")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingBookletsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("CourseMeetingBooklet")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingDedicatedTeachersModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithOne("CourseMeetingDedicatedTeacher")
                        .HasForeignKey("DataModels.TrainingManagementModels.CourseMeetingDedicatedTeachersModel", "CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany("CourseMeetingDedicatedTeachers")
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingStudentsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CourseMeetingStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("CourseMeetingStudents")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingStudentTypesModel", "CourseMeetingStudentType")
                        .WithMany("CourseMeetingStudents")
                        .HasForeignKey("CourseMeetingStudentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.OrdersModels.OrdersModel", "Order")
                        .WithMany("CourseMeetingStudents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUsers")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingVideosModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("CourseMeetingVideos")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseMeetingsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CourseMeetings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseStudentQuestionAnswersModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "AnsweredUser")
                        .WithMany()
                        .HasForeignKey("AnsweredUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.CourseStudentQuestionsModel", "StudentQuestion")
                        .WithMany("StudentQuestionAnswers")
                        .HasForeignKey("StudentQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CourseStudentQuestionsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CoursesModel", "Course")
                        .WithMany("CourseStudentQuestions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.CoursesModel", b =>
                {
                    b.HasOne("DataModels.SystemsModels.CourseCategoryTypesModel", "CourseCategoryType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.CourseTypesModel", "CourseTypes")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.BasicDefinitionsModels.LanguagesModel", "Languages")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.LessonsModel", "Lessons")
                        .WithMany("Courses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "TeacherUser")
                        .WithMany()
                        .HasForeignKey("TeacherUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LessonsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.FieldsModel", "Field")
                        .WithMany("Lessons")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataModels.TrainingManagementModels.LevelsModel", "Level")
                        .WithMany("Lessons")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.LevelsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.LevelGroupsModel", "LevelGroup")
                        .WithMany("Levels")
                        .HasForeignKey("LevelGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.MeetingAbsentationsModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("MeetingAbsentations")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "StudentUsers")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.OnlineClassesModel", b =>
                {
                    b.HasOne("DataModels.TrainingManagementModels.CourseMeetingsModel", "CourseMeeting")
                        .WithMany("OnlineClasses")
                        .HasForeignKey("CourseMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.ProductTypesModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataModels.TrainingManagementModels.ProductsModel", b =>
                {
                    b.HasOne("DataModels.IdentitiesModels.UsersModel", "ModUser")
                        .WithMany()
                        .HasForeignKey("ModUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataModels.TrainingManagementModels.ProductTypesModel", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
